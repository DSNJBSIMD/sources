import { Step, Then, When } from '@badeball/cypress-cucumber-preprocessor';

import { getServiceProviderConfig } from '../helpers';
import ExploitSpFormPage from '../pages/exploit-sp-form-page';

const exploitSpFormPage = new ExploitSpFormPage();

When(
  "j'entre les valeurs par défaut pour mon fournisseur de service",
  function () {
    exploitSpFormPage.fillDefaultValues(this.spConfig);
  },
);

When(
  'je coche les FI de la configuration {string} de mon fournisseur de service',
  function (spConfigName: string) {
    const key = 'idpFilterList';
    const spConfig = getServiceProviderConfig(this.spConfigs, spConfigName);
    const values = spConfig[key];
    exploitSpFormPage.fillIdpFilterListValues(values);
    // Update SP config
    this.spConfig = {
      ...this.spConfig,
      [key]: values,
    };
  },
);

When(
  /^j'entre "([^"]*)" dans le champ "([^"]+)" du formulaire de (?:création|modification) de FS$/,
  function (value: string, key: string) {
    exploitSpFormPage.fillValue(key, value);
    // Update SP config
    this.spConfig = {
      ...this.spConfig,
      [key]: value,
    };
  },
);

Then(
  /^le champ "([^"]+)" contient "([^"]*)" dans le formulaire de (?:création|modification) de FS$/,
  function (name: string, value: string) {
    exploitSpFormPage.checkHasValue(name, value);
  },
);

Then(
  /^le label "entityId" contient "([^"]*)" dans le formulaire de modification de FS$/,
  function (value: string) {
    exploitSpFormPage.getEntityIdLabel().should('contain.text', value);
  },
);

Then(
  /^les FI listés dans la configuration du FS "([^"]+)" sont cochés dans le formulaire de (?:création|modification) de FS$/,
  function (spConfigName: string) {
    const spConfig = getServiceProviderConfig(this.spConfigs, spConfigName);
    const expectedValues = spConfig['idpFilterList'];
    exploitSpFormPage.checkHasIdpFilterListValues(expectedValues);
  },
);

Then(
  /^aucun FI n'est coché dans le formulaire de (?:création|modification) de FS$/,
  function () {
    const expectedValues = [];
    exploitSpFormPage.checkHasIdpFilterListValues(expectedValues);
  },
);

Then(
  /^les cases à cocher des FI sont (activées|désactivées) dans le formulaire de (?:création|modification) de FS$/,
  function (text: string) {
    const isDisabled = text === 'désactivées';
    exploitSpFormPage.checkIsIdpFilterListDisabled(isDisabled);
  },
);

Then(
  /^la liste "([^"]+)" contient "([^"]*)" dans le formulaire de (?:création|modification) de FS$/,
  function (name: string, value: string) {
    exploitSpFormPage.checkHasListSelectedOptionLabel(name, value);
  },
);

Then('je vérifie la configuration du fournisseur de service', function () {
  expect(this.spConfig).to.be.ok;
  // Check entity_id separately as the value is not yet in an input field
  const { entity_id: entityId, ...values } = this.spConfig;
  exploitSpFormPage.checkValues(values);
  if (entityId) {
    Step(
      this,
      `le label "entityId" contient "${entityId}" dans le formulaire de modification de FS`,
    );
  }
});

When(
  /^je valide le formulaire de (?:création|modification) de FS$/,
  function () {
    exploitSpFormPage.validateForm(this.operatorUser);
  },
);
