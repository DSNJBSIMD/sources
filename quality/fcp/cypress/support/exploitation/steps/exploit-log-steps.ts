import { Then } from '@badeball/cypress-cucumber-preprocessor';

import {
  filterLogs,
  getAllBusinessLogs,
  hasBusinessLog,
  LogResult,
  prepareEventVerification,
} from '../../common/helpers';

/**
 * Those steps are only runnable on local logs
 */

Then(
  /^l'événement exploitation "([^"]+)" (?:"([^"]+)" )?(est|n'est pas) journalisé(?: avec )?((?:"[^"]+" "(?:[^"]*)"(?: et )?)+)?$/,
  function (action: string, entity: string | null, text: string, info: string) {
    const { name } = this.env;
    const logPath = Cypress.env('EXPLOIT_LOG_FILE_PATH');
    if (name !== 'docker') {
      cy.log(
        'aucune validation des événements dans les logs possible en dehors de la stack locale',
      );
      return;
    }

    // Current exploitation user
    const { username: user } = this.operatorUser;

    const valueMapping = {
      false: false,
      'non null': 'RegExp:^.+$',
      null: null,
      true: true,
    };

    const DELIMITOR = ' et ';
    const extraEventVerification = prepareEventVerification(
      info,
      DELIMITOR,
      {},
      valueMapping,
    );
    const expectedEvent: Record<string, unknown> = {
      action,
      user,
      ...extraEventVerification,
    };
    if (entity) {
      expectedEvent.entity = entity;
    }

    const logResult =
      text === 'est' ? LogResult.EventFound : LogResult.EventNotFound;
    hasBusinessLog(expectedEvent, logResult, logPath);
  },
);

Then(
  /^(\d+) événements? exploitation "([^"]+)" (?:"([^"]+)" )?(?:est|sont) journalisés?(?: avec )?((?:"[^"]+" "(?:[^"]*)"(?: et )?)+)?$/,
  function (
    count: number,
    action: string,
    entity: string | null,
    info?: string,
  ) {
    const { name } = this.env;
    const logPath = Cypress.env('EXPLOIT_LOG_FILE_PATH');
    if (name !== 'docker') {
      cy.log(
        'aucune validation des événements dans les logs possible en dehors de la stack locale',
      );
      return;
    }

    // Current exploitation user
    const { username: user } = this.operatorUser;

    const valueMapping = {
      false: false,
      'non null': 'RegExp:^.+$',
      null: null,
      true: true,
    };

    const DELIMITOR = ' et ';
    const extraEventVerification = prepareEventVerification(
      info,
      DELIMITOR,
      {},
      valueMapping,
    );
    const expectedEvent: Record<string, unknown> = {
      action,
      user,
      ...extraEventVerification,
    };
    if (entity) {
      expectedEvent.entity = entity;
    }
    cy.log(`expected event: ${JSON.stringify(expectedEvent)}`);

    getAllBusinessLogs(logPath).then((logs) => {
      const events = filterLogs(logs, expectedEvent);
      cy.log(`found events: ${JSON.stringify(events)}`);
      cy.wrap(events).should('have.length', count);
    });
  },
);
